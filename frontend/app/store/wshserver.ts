// Copyright 2024, Command Line Inc.
// SPDX-License-Identifier: Apache-2.0

// generated by cmd/generate/main-generate.go

import * as WOS from "./wos";

// WshServerCommandToDeclMap
class WshServerType {
    // command "controller:input" [call]
	BlockInputCommand(data: CommandBlockInputData, opts?: WshRpcCommandOpts): Promise<void> {
        return WOS.wshServerRpcHelper_call("controller:input", data, opts);
    }

    // command "controller:restart" [call]
	BlockRestartCommand(data: CommandBlockRestartData, opts?: WshRpcCommandOpts): Promise<void> {
        return WOS.wshServerRpcHelper_call("controller:restart", data, opts);
    }

    // command "createblock" [call]
	CreateBlockCommand(data: CommandCreateBlockData, opts?: WshRpcCommandOpts): Promise<ORef> {
        return WOS.wshServerRpcHelper_call("createblock", data, opts);
    }

    // command "file:append" [call]
	AppendFileCommand(data: CommandAppendFileData, opts?: WshRpcCommandOpts): Promise<void> {
        return WOS.wshServerRpcHelper_call("file:append", data, opts);
    }

    // command "file:appendijson" [call]
	AppendIJsonCommand(data: CommandAppendIJsonData, opts?: WshRpcCommandOpts): Promise<void> {
        return WOS.wshServerRpcHelper_call("file:appendijson", data, opts);
    }

    // command "getmeta" [call]
	GetMetaCommand(data: CommandGetMetaData, opts?: WshRpcCommandOpts): Promise<MetaType> {
        return WOS.wshServerRpcHelper_call("getmeta", data, opts);
    }

    // command "message" [call]
	MessageCommand(data: CommandMessageData, opts?: WshRpcCommandOpts): Promise<void> {
        return WOS.wshServerRpcHelper_call("message", data, opts);
    }

    // command "resolveids" [call]
	ResolveIdsCommand(data: CommandResolveIdsData, opts?: WshRpcCommandOpts): Promise<CommandResolveIdsRtnData> {
        return WOS.wshServerRpcHelper_call("resolveids", data, opts);
    }

    // command "setmeta" [call]
	SetMetaCommand(data: CommandSetMetaData, opts?: WshRpcCommandOpts): Promise<void> {
        return WOS.wshServerRpcHelper_call("setmeta", data, opts);
    }

    // command "setview" [call]
	BlockSetViewCommand(data: CommandBlockSetViewData, opts?: WshRpcCommandOpts): Promise<void> {
        return WOS.wshServerRpcHelper_call("setview", data, opts);
    }

    // command "streamtest" [responsestream]
	RespStreamTest(opts?: WshRpcCommandOpts): AsyncGenerator<number, void, boolean> {
        return WOS.wshServerRpcHelper_responsestream("streamtest", null, opts);
    }

}

export const WshServer = new WshServerType();
