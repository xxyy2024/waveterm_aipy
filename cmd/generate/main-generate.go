// Copyright 2024, Command Line Inc.
// SPDX-License-Identifier: Apache-2.0

package main

import (
	"fmt"
	"os"
	"reflect"
	"sort"

	"github.com/wavetermdev/thenextwave/pkg/service"
	"github.com/wavetermdev/thenextwave/pkg/tsgen"
	"github.com/wavetermdev/thenextwave/pkg/util/utilfn"
)

func generateTypesFile() error {
	fd, err := os.Create("frontend/types/gotypes.d.ts")
	if err != nil {
		return err
	}
	defer fd.Close()
	fmt.Fprintf(os.Stderr, "generating types file to %s\n", fd.Name())
	tsTypesMap := make(map[reflect.Type]string)
	tsgen.GenerateWaveObjTypes(tsTypesMap)
	err = tsgen.GenerateServiceTypes(tsTypesMap)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error generating service types: %v\n", err)
		os.Exit(1)
	}
	fmt.Fprintf(fd, "// Copyright 2024, Command Line Inc.\n")
	fmt.Fprintf(fd, "// SPDX-License-Identifier: Apache-2.0\n\n")
	fmt.Fprintf(fd, "// generated by cmd/generate/main-generate.go\n\n")
	fmt.Fprintf(fd, "declare global {\n\n")
	var keys []reflect.Type
	for key := range tsTypesMap {
		keys = append(keys, key)
	}
	sort.Slice(keys, func(i, j int) bool {
		iname, _ := tsgen.TypeToTSType(keys[i])
		jname, _ := tsgen.TypeToTSType(keys[j])
		return iname < jname
	})
	for _, key := range keys {
		tsCode := tsTypesMap[key]
		istr := utilfn.IndentString("    ", tsCode)
		fmt.Fprint(fd, istr)
	}
	fmt.Fprintf(fd, "}\n\n")
	fmt.Fprintf(fd, "export {}\n")
	return nil
}

func generateServicesFile() error {
	fd, err := os.Create("frontend/app/store/services.ts")
	if err != nil {
		return err
	}
	defer fd.Close()
	fmt.Fprintf(os.Stderr, "generating services file to %s\n", fd.Name())
	fmt.Fprintf(fd, "// Copyright 2024, Command Line Inc.\n")
	fmt.Fprintf(fd, "// SPDX-License-Identifier: Apache-2.0\n\n")
	fmt.Fprintf(fd, "// generated by cmd/generate/main-generate.go\n\n")
	fmt.Fprintf(fd, "import * as WOS from \"./wos\";\n\n")
	orderedKeys := utilfn.GetOrderedMapKeys(service.ServiceMap)
	for _, serviceName := range orderedKeys {
		serviceObj := service.ServiceMap[serviceName]
		svcStr := tsgen.GenerateServiceClass(serviceName, serviceObj)
		fmt.Fprint(fd, svcStr)
		fmt.Fprint(fd, "\n")
	}
	return nil
}

func main() {
	err := service.ValidateServiceMap()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error validating service map: %v\n", err)
		os.Exit(1)
	}
	err = generateTypesFile()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error generating types file: %v\n", err)
		os.Exit(1)
	}
	err = generateServicesFile()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error generating services file: %v\n", err)
		os.Exit(1)
	}
}
